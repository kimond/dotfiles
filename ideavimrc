" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

" Source your .vimrc
" source ~/.vimrc


" leader
map <space> <Nop>
let mapleader = " "

set notimeout

"" Base Settings
"" =============
set incsearch

" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Don't use Ex mode, use Q for formatting.
map Q gq


"" Plugin Settings
"" ===============
set nerdtree

set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

set which-key
let g:WhichKey_FontSize = 14
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "false"

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
Plug 'machakann/vim-highlightedyank'
" Commentary plugin
Plug 'tpope/vim-commentary'


"" Key Mappings
"" ============

:map s <Action>(flash.search)

:map <leader>e :NERDTreeToggle<CR>


" vim surround
set surround
let g:surround_no_mappings = 1
nmap gsd <Plug>DSurround
nmap gsr <Plug>CSurround

let g:WhichKeyDesc_buffers        = "<leader>b  Buffers"
:map <leader>bd <Action>(CloseContent)
:map <leader>bo <Action>(CloseAllEditorsButActive)
:map <leader>bp <Action>(PinActiveEditorTab)
:map <leader>bP <Action>(CloseAllUnpinnedEditors)

:map [b <Action>(PreviousTab)
:map ]b <Action>(NextTab)
:map <S-h> <Action>(PreviousTab)
:map <S-l> <Action>(NextTab)

:map [e <Action>(GotoPreviousError)
:map ]e <Action>(GotoNextError)

:map <leader><bar> <Action>(SplitVertically)
:map <leader>- <Action>(SplitHorizontally)

let g:WhichKeyDesc_test        = "<leader>t  Test/Run"
:map <leader>tr <Action>(RunClass)
:map <leader>tl <Action>(Rerun)
:map <leader>tS <Action>(Stop)
:map <leader>tt <Action>(RunTestGroup)
:map <leader>tT <Action>(RunAllTests)

let g:WhichKeyDesc_code        = "<leader>c  Code"
:map <leader>cr <Action>(RenameElement)
:map <leader>cf <Action>(ReformatCode)
:map <leader>ca <Action>(ShowIntentionActions)
:map <leader>cd <Action>(ShowErrorDescription)


:map <leader>: :history<cr>
:map <leader><space> <Action>(GotoFile)
:map <leader>/ <Action>(FindInPath)
:map <leader>,  <Action>(Switcher)

let g:WhichKeyDesc_files        = "<leader>f  Files"
:map <leader>ff <Action>(GotoFile)
:map <leader>fr <Action>(RecentFiles)
:map <leader>ft <Action>(ActivateTerminalToolWindow)
:map <leader>fb <Action>(Switcher)

let g:WhichKeyDesc_search        = "<leader>s  Search"
:map <leader>sg <Action>(TextSearchAction)
:map <leader>ss <Action>(GotoSymbol)

let g:WhichKeyDesc_debug        = "<leader>d  Debug"
:map <leader>db <Action>(ToggleLineBreakpoint)

let g:WhichKeyDesc_git        = "<leader>g  Git"
:map <leader>gf <Action>(Vcs.ShowTabbedFileHistory)
et g:WhichKeyDesc_git_hunk        = "<leader>gh  Git hunk"
:map <leader>ghr <Action>(Vcs.RollbackChangedLines)
:map <leader>ghR <Action>(ChangesView.Revert)

let g:WhichKeyDesc_trouble        = "<leader>x  Trouble"
:map <leader>xx <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_lazy        = "<leader>l Lazy"
:map <leader>l <Action>(WelcomeScreen.Plugins)

" LSP Keymaps
:map gd <Action>(GotoDeclaration)
:map gr <Action>(FindUsages)
:map gI <Action>(GotoImplementation)
:map gy <Action>(GotoTypeDeclaration)
:map gK <Action>(ParameterInfo)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j
